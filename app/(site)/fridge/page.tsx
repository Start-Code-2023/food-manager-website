"use client";

import ItemList from '@/components/itemList'
import { demoItems } from '@/constants/demo_items'
import Drawer from '@/components/drawer'
import NavBar from '@/components/nav'
import { useState, useEffect } from 'react'
import { LOCAL_GET_FROM_USER_URL } from '@/constants/url'
import Spinner from '@/components/spinner';
import { makeOpenAIRequest } from '@/utils/chatgpt';
import Badge from '@/components/badge';
import { IS_GPT_ON } from '@/constants/toggle';

export default function FridgePage() {

  const [data, setData] = useState<FoodItems | null>(null);
  const [dishes, setDishes] = useState<any | null>(null);
  const [openAIRequestMade, setOpenAIRequestMade] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(LOCAL_GET_FROM_USER_URL, {
          method: 'GET',
        });
        if (response.ok) {
          const result: FoodItems = await response.json();
          setData(result)
        } else {
          console.log("Error: Status != ok, setting demo items")
          setData({ food_items: demoItems, user_id: "DEMOITEMS" })

        }
      } catch (error) {
        console.log("Error during fetching the data")
      }
    };

    fetchData();
  }, []);


  useEffect(() => {
    if (data && data.food_items.length > 0 &&  IS_GPT_ON && !openAIRequestMade) { // Check if data is available and the OpenAI request hasn't been made
      const makeOpenAIRequestAsync = async () => {
        try {
          const response: any | null = await makeOpenAIRequest(data);
          console.log('OpenAI Response:', response);
          // Handle the response as needed
          if (response != null) {
            setDishes(response)
          }

          // Set the flag to indicate the OpenAI request has been made
          setOpenAIRequestMade(true);
        } catch (error) {
          console.error('Open AI Error:', error);
        }
      };

      makeOpenAIRequestAsync();
    }
  }, [data, openAIRequestMade]);


  return (
    <>
      <NavBar />
      <main className="flex min-h-screen flex-col items-center pt-10 justify-between bg-white">
        { // Conditionally render based on the value of LOCAL
          data == null ? (
            <Spinner /> // Show loading state while fetching data
          ) : (
            <section id="data">
              {data ? ( // Check if data exists before rendering
                <ItemList items={data.food_items} /> // Render with fetched data
              ) : (
                <p>No data available</p> // Render if data is empty after fetch
              )}
            </section>
          )
        }


        <h2 className='text-black mt-5 mb-1 font-bold text-xl'>Dishes - Generated by ChatGPT ðŸ¤–</h2>

        { // Conditionally render based on the value of LOCAL
          dishes == null ? (
            IS_GPT_ON ? <Spinner /> : <p className='text-black'>GPT is Turned off..</p>
  
          ) : (
            <section id="data" className='mb-10 pb-10'>
              {dishes ? ( // Check if data exists before rendering
                <section className="flex flex-wrap px-5">
                  {JSON.parse(dishes.toString()).retter.map((string: string, index: number) => (
                    <Badge key={index} text={string} />
                  ))}
                </section>
              ) : (
                <p className='text-black text-lg'>No data available</p> // Render if data is empty after fetch
              )}
            </section>
          )
        }




        <Drawer />
      </main>
    </>

  )
}
